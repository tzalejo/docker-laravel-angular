version: "3"

networks:
  laravel:

services:
  nginx:
    build:
      context: .
      dockerfile: nginx.dockerfile
    container_name: nginx
    ports:
      - "${APP_PORT}:80"
    volumes:
      - ${APP_VOLUMEN_PATH}:/var/www/html
    depends_on:
      - php
      - mysql
    networks:
      - laravel

  mysql:
    image: mysql:${DB_MYSQL_VERSION}
    container_name: mysql
    restart: unless-stopped
    tty: true
    ports:
      - "${DB_PORT}:${DB_PORT_CONTAINER}"
    volumes:
      - ${DB_VOLUMEN_PATH}:/var/lib/mysql
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      SERVICE_NAME: ${DB_SERVICE_NAME}
      SERVICE_TAGS: ${DB_SERVICE_TAGS}
    networks:
      - laravel

  php:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: php
    volumes:
      - ${APP_VOLUMEN_PATH}:/var/www/html:delegated
    ports:
      - "9000:9000"
    networks:
      - laravel

  composer:
    build:
      context: .
      dockerfile: composer.dockerfile
    container_name: composer
    volumes:
      - ${APP_VOLUMEN_PATH}:/var/www/html
    working_dir: /var/www/html
    depends_on:
      - php
    user: laravel
    networks:
      - laravel

  npm:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: npm
    ports:
      - "${NPM_PORT}:${NPM_PORT_CONTAINER}"
    volumes:
      - ${NPM_VOLUMEN_PATH}:/app
    user: 1000:1000
    networks:
      - laravel

  artisan:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: artisan
    volumes:
      - ${APP_VOLUMEN_PATH}:/var/www/html:delegated
    depends_on:
      - mysql
    working_dir: /var/www/html
    user: laravel
    entrypoint: ["php", "/var/www/html/artisan"]
    networks:
      - laravel
